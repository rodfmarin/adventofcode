"""
Usually the Day 1 story goes in here.
It's really long for 2022/9.
It's about a rope with a head and tail and traversing a board, calculating the tail's path along the board:

Read it in full here:
https://adventofcode.com/2022/day/9
"""
import operator
from functools import reduce

def get_input():
    input = []
    with open('./input.txt', 'r') as my_file:
        for line in my_file:
            line = line.replace("\n", "")
            input.append(line)
    return input


class Head:
    """
    A Rope's Head
    """
    def __init__(self, x: int, y:int):
        self.x = x
        self.y = y


class Tail:
    """
    A Rope's Tail
    """
    def __init__(self, x: int, y: int):
        self.x = x
        self.y = y
        self.cells_visited = ['0,0']

    def move(self, head: Head):
        """
        Examine the head's x,y against your own x,y
        Assume that this is where head has already moved to
        You should know the direction the head was travelling to know where to set your pos
        We want to examine the difference between the head's x/y and our own
        If the difference in any x,y is abs > 1, the head and tail are no longer touching
        You have to move!
        """
        if abs(head.x - self.x) > 1 or abs(head.y - self.y) > 1:
            i = 0
            j = 0
            k = 0
            l = 0

            if head.x > self.x:
                i = 1
            if self.x > head.x:
                j = 1
            if head.y > self.y:
                k = 1
            if self.y > head.y:
                l = 1

            self.x = self.x + (i - j)
            self.y = self.y + (k - l)
            self.add_cell_visited(self.x, self.y)

    def move2(self, head, tail):
        """
        Examine the head's x,y against your own x,y
        Assume that this is where head has already moved to
        You should know the direction the head was travelling to know where to set your pos
        We want to examine the difference between the head's x/y and our own
        If the difference in any x,y is abs > 1, the head and tail are no longer touching
        You have to move!
        """
        if abs(head.x - tail.x) > 1 or abs(head.y - tail.y) > 1:
            i = 0
            j = 0
            k = 0
            l = 0

            if head.x > tail.x:
                i = 1
            if tail.x > head.x:
                j = 1
            if head.y > tail.y:
                k = 1
            if tail.y > head.y:
                l = 1

            tail.x = tail.x + (i - j)
            tail.y = tail.y + (k - l)
            self.add_cell_visited(tail.x, tail.y)


    def add_cell_visited(self, x: int, y: int):
        """
        Add the visited cell to the list
        """
        name = f"{x},{y}"
        if name in self.cells_visited:
            pass
        else:
            self.cells_visited.append(name)


class Rope:
    """
    A Rope has a 'head' and a 'tail'
    Assume that when an instance of Rope is created that it's head and tails x and y positions are 0
    This means that they are touching
    Also it is a space that the tail has visited
    Careful about diagonals, a tail will only need to move if it's not touching
    """
    def __init__(self):
        self.head = Head(x=0, y=0)
        self.tail = Tail(x=0, y=0)

    def process_move(self, direction: str, count: int):
        # We need a Rope.process_move() function

        # Since we're working with int x,y values
        # Our 'steps' should increment or decrement them
        operation = None
        the_attr = None

        if direction == "R":
            operation = operator.add
            the_attr = "y"
        elif direction == "L":
            operation = operator.sub
            the_attr = "y"
        elif direction == "U":
            operation = operator.sub
            the_attr = "x"
        elif direction == "D":
            operation = operator.add
            the_attr = "x"

        for step in range(count):
            # iteratively move the head
            setattr(self.head, the_attr, operation(getattr(self.head, the_attr), 1))
        # it should optionally move the tail if necessary
            self.tail.move(head=self.head)
            # it should record the tail's origin cell only if the Rope has 'just started'
            # it should record the location of the tail's x,y into a list if tail moved


def update_knot_position(head, tail):
    if abs(head.x - tail.x) > 1 or abs(head.y - tail.y) > 1:
        i = 0
        j = 0
        k = 0
        l = 0

        if head.x > tail.x:
            i = 1
        if tail.x > head.x:
            j = 1
        if head.y > tail.y:
            k = 1
        if tail.y > head.y:
            l = 1

        tail.x = tail.x + (i - j)
        tail.y = tail.y + (k - l)
        tail.add_cell_visited(tail.x, tail.y)

def do_part_one():
    input = get_input()
    r = Rope()

    for line in input:
        tokens = line.split()
        count = int(tokens[1])
        direction = tokens[0]
        print(f"Count is {count} and direction is {direction}")
        d = direction
        r.process_move(direction, count)

    print(f"cells visisted {r.tail.cells_visited}")
    print(len(r.tail.cells_visited))

sample_data = '''L 1
D 2
L 2
U 2
D 2
U 2
D 1
R 1
U 1
R 1
L 2
R 1
U 1
R 2
L 1
D 2
R 2
L 2
D 1
U 2
R 2
L 1
U 2
D 2
U 2
D 2
L 1
R 2
L 1
R 1
L 1
D 2
L 1
U 1
L 2
U 1
L 2
R 2
D 1
L 2
R 1
D 1
U 1
L 1
U 2
D 2
L 1
U 1
R 2
D 1
L 1
U 1
R 2
D 1
R 2
D 2
U 2
R 2
U 2
R 1
L 1
R 1
L 1
D 1
U 1
R 2
D 2
L 2
U 1
D 1
R 1
U 1
L 1
D 2
U 2
D 1
L 2
U 1
D 1
L 2
U 1
R 2
D 1
L 1
R 1
L 1
D 1
L 1
R 1
L 2
R 2
D 1
R 2
D 1
L 1
D 1
L 2
R 2
U 2
L 2
R 1
U 2
R 2
D 1
U 1
L 2
D 2
U 2
L 2
R 1
U 2
D 2
L 3
D 1
R 2
D 2
U 2
L 3
U 1
D 1
R 1
D 2
L 2
D 2
R 3
D 1
U 1
L 3
R 2
L 1
U 2
D 1
R 1
U 1
D 1
L 3
U 3
R 3
U 1
L 1
U 1
R 3
U 3
L 2
R 1
L 2
U 1
R 3
L 3
U 1
D 2
U 3
R 3
D 1
L 1
R 2
L 1
U 1
R 2
D 1
U 1
D 1
R 3
D 3
R 1
U 3
D 2
R 2
L 2
U 1
R 2
U 2
D 2
R 1
U 1
R 3
D 2
U 1
D 2
L 3
R 3
U 3
R 3
L 3
U 3
L 2
R 1
U 2
D 2
R 2
L 1
U 3
L 2
U 1
R 1
U 3
D 3
R 2
L 1
U 3
D 3
L 2
R 2
D 3
L 3
R 2
D 3
U 3
L 1
D 1
L 2
R 3
U 2
D 2
U 3
R 2
L 2
U 3
D 1
L 3
U 1
L 1
U 1
D 4
L 3
U 3
D 2
R 3
U 4
D 2
U 1
R 3
L 4
R 1
D 2
R 1
D 4
U 1
D 3
U 4
L 3
D 4
R 1
U 3
R 1
U 2
L 2
R 1
D 2
U 1
D 4
R 1
D 1
R 4
L 2
D 2
R 2
L 3
U 1
L 4
D 1
U 2
L 4
D 3
R 4
L 4
D 3
L 4
R 1
D 3
U 1
L 1
D 4
R 1
U 4
L 2
U 3
R 4
L 4
D 4
U 3
R 2
U 2
L 2
R 1
U 2
L 3
U 4
D 4
L 4
R 4
L 3
D 4
U 3
L 3
U 2
L 3
R 3
D 4
R 4
L 1
U 1
R 1
D 2
U 3
D 4
L 4
D 3
U 4
L 1
R 4
U 2
D 4
R 2
L 3
R 2
U 4
R 3
U 1
L 2
U 4
R 4
L 1
D 2
R 1
U 4
R 4
U 1
L 1
U 1
R 1
L 4
U 2
R 2
L 5
R 5
L 1
R 4
U 5
L 4
R 3
D 1
R 4
L 5
R 2
L 1
R 5
D 4
R 4
L 1
U 2
D 4
U 4
L 5
D 3
U 2
D 5
L 5
D 3
U 1
R 5
U 4
R 1
U 4
D 1
R 2
D 2
U 3
D 3
R 5
U 2
D 2
U 5
L 4
R 1
D 4
U 3
L 4
D 1
L 4
D 5
L 5
U 3
L 2
R 4
L 5
U 2
L 1
D 5
U 2
R 5
L 1
D 2
R 3
D 5
U 2
D 3
R 4
L 3
R 5
L 5
U 3
L 2
D 5
U 5
R 4
U 5
D 5
L 1
D 4
U 4
L 4
U 3
D 3
L 2
R 1
L 5
D 3
L 1
U 4
D 5
L 5
R 1
U 4
D 5
U 3
D 5
L 1
R 5
L 1
D 3
L 2
D 3
L 2
D 2
U 3
D 2
L 3
R 2
U 3
L 4
D 4
U 4
D 4
R 2
D 3
U 4
D 6
L 2
D 4
U 4
L 2
D 4
U 1
D 1
U 1
R 3
U 3
L 1
U 6
R 5
L 1
U 5
L 2
D 1
U 3
D 2
U 3
D 2
R 2
U 6
L 5
D 4
L 2
D 6
U 5
D 3
R 2
L 6
U 5
R 2
U 3
L 2
R 3
D 6
U 5
D 1
R 5
L 3
U 5
R 3
L 5
R 3
L 4
U 6
D 3
U 6
L 3
R 5
U 6
L 1
D 5
L 3
R 5
L 3
D 4
R 4
D 6
L 1
R 4
U 4
D 4
U 5
D 6
L 6
R 2
L 4
D 3
R 4
U 5
L 5
D 4
R 6
D 6
R 2
U 4
D 5
L 6
R 3
U 6
R 6
D 3
R 6
L 1
D 3
U 2
R 2
D 2
U 6
D 4
U 5
D 1
L 6
U 2
D 4
R 2
D 3
U 4
L 1
D 2
L 2
U 2
D 3
L 5
U 6
L 5
R 2
L 2
D 7
R 2
D 6
U 5
L 4
U 2
R 1
D 1
L 7
D 4
R 2
D 6
U 4
L 1
U 2
R 4
D 4
R 3
L 3
U 4
R 3
L 2
U 6
D 1
L 3
U 6
D 2
R 2
L 5
U 7
R 5
L 2
D 5
U 4
D 3
L 1
D 5
L 5
U 4
R 1
D 4
L 2
D 7
L 7
D 3
U 4
L 5
D 3
L 7
R 3
D 4
L 5
R 7
L 2
U 4
R 5
L 2
R 2
D 1
R 1
U 3
R 4
L 1
U 4
L 2
R 1
U 4
D 7
U 2
D 2
R 2
L 3
D 3
R 1
L 2
R 2
U 6
R 1
U 1
R 7
U 3
D 2
L 5
U 7
D 7
U 3
L 2
U 7
R 3
D 3
U 2
D 5
R 6
D 5
U 1
R 7
D 6
R 6
U 3
L 1
R 6
D 6
R 1
L 6
R 6
D 7
R 3
L 5
R 5
D 4
U 7
L 8
D 2
U 3
D 5
L 4
D 2
R 1
L 5
D 8
U 6
R 2
D 2
L 2
R 3
L 2
R 3
L 6
R 4
U 6
D 7
R 6
L 7
U 5
L 6
R 6
D 5
R 5
D 5
L 4
D 4
U 7
L 3
U 7
L 4
U 8
R 7
D 4
L 2
D 6
R 2
U 3
L 6
D 1
R 4
U 8
D 3
U 2
L 6
R 1
L 2
U 4
L 1
R 1
U 8
D 2
L 5
D 6
L 5
R 2
L 5
U 6
D 1
L 7
U 4
D 5
L 3
R 5
D 5
R 3
L 2
D 3
L 3
D 5
L 8
R 7
D 5
L 2
R 3
U 5
L 1
D 6
R 5
L 6
R 1
U 1
R 4
L 6
U 1
D 6
L 7
D 8
R 1
L 5
D 2
R 2
D 2
R 7
L 7
U 7
R 4
D 5
R 4
U 8
R 3
D 6
R 1
D 1
U 8
D 4
U 7
R 3
L 9
D 3
L 9
U 1
R 5
D 4
U 7
L 4
U 4
L 7
R 1
D 8
R 4
L 4
U 4
L 8
U 5
L 7
D 4
L 9
D 2
U 3
L 3
D 5
U 1
L 1
R 6
D 2
L 1
D 2
L 3
U 4
L 6
U 3
R 5
L 3
D 7
U 6
L 6
D 9
L 5
U 1
R 9
U 4
R 1
L 5
U 9
R 6
D 7
U 9
L 4
U 6
D 7
U 8
L 1
U 8
R 4
L 2
R 3
D 1
U 6
D 9
L 8
U 8
L 9
D 4
R 8
L 1
D 9
L 1
R 7
D 8
U 6
D 8
R 9
U 2
R 3
U 7
R 8
D 5
L 6
U 3
D 8
R 2
U 5
L 5
R 9
D 4
U 1
D 6
L 1
U 3
R 4
L 5
R 1
L 9
R 4
D 1
L 9
D 4
U 7
R 2
D 8
L 9
R 5
L 5
D 7
L 6
D 6
L 10
U 8
L 6
D 6
R 9
D 10
L 5
R 8
D 2
U 7
R 4
U 5
R 3
L 6
D 10
L 7
D 7
U 9
L 6
R 10
U 2
L 3
U 10
D 3
R 10
D 4
L 9
R 2
L 8
R 4
D 7
R 10
D 2
U 9
D 2
R 7
D 10
R 10
D 7
R 5
D 5
R 7
U 7
D 10
U 5
D 3
R 5
U 10
L 3
D 7
R 7
U 7
L 4
U 3
R 3
D 7
L 7
U 2
D 4
L 5
R 3
U 5
D 6
R 2
D 4
U 2
D 6
U 7
D 2
L 2
U 6
D 9
U 3
D 1
U 5
D 2
R 3
L 6
D 8
L 7
R 5
L 4
U 6
L 9
R 5
D 5
U 4
D 6
U 5
D 1
U 8
D 2
L 4
R 5
L 3
U 10
L 1
R 10
U 4
R 5
D 4
R 8
U 5
L 2
R 10
L 10
U 4
D 3
U 3
R 4
D 8
R 9
L 5
R 5
D 10
L 11
D 10
L 6
R 11
L 2
R 7
U 6
R 9
L 10
D 3
R 6
D 7
L 10
U 7
D 2
L 4
D 1
L 8
D 7
L 10
R 2
U 7
L 9
R 1
D 1
L 11
U 11
D 3
R 4
D 4
U 11
L 6
D 2
L 7
D 6
U 8
L 1
R 11
L 1
U 3
D 8
L 4
D 11
U 8
R 4
D 1
R 5
D 9
L 2
D 1
U 4
R 7
L 6
D 5
U 1
L 8
U 6
R 10
D 11
U 3
D 1
U 7
D 9
R 8
D 4
R 11
L 5
D 8
L 8
U 1
R 10
U 9
D 7
R 1
D 9
U 1
R 3
D 11
L 9
D 1
R 2
U 5
R 8
U 1
L 8
D 11
U 9
L 8
U 1
R 1
D 1
R 10
D 3
R 8
U 10
D 2
U 6
D 5
R 5
D 10
R 7
L 1
R 10
U 1
D 8
R 7
D 10
R 8
U 2
L 12
D 1
R 6
D 7
U 11
L 8
R 12
D 3
U 12
L 11
D 2
R 3
L 6
U 1
R 2
L 5
R 2
U 8
L 11
R 4
L 2
R 3
D 12
R 4
U 8
R 5
D 6
R 9
D 8
R 7
D 10
R 5
U 4
L 6
D 1
U 6
D 7
R 2
L 2
R 8
L 12
R 7
L 9
U 10
D 2
R 9
L 2
D 10
U 8
R 9
L 7
D 1
L 8
R 4
L 6
D 11
R 2
L 6
D 1
R 6
D 2
R 11
U 9
R 10
U 8
L 4
D 12
L 4
D 7
R 5
L 11
D 2
U 7
D 1
L 10
R 3
L 5
U 12
R 5
L 8
R 6
L 10
D 9
U 8
R 3
D 12
L 4
D 7
U 3
D 11
U 2
D 11
R 7
D 5
U 2
D 8
U 7
R 2
U 5
D 1
R 10
D 7
L 7
R 4
L 1
U 12
L 12
D 9
R 7
U 9
R 5
L 3
R 2
U 11
D 1
L 10
D 11
R 1
D 7
R 7
D 9
R 13
D 7
L 9
D 9
R 13
D 7
R 9
D 10
U 7
R 5
L 1
U 8
D 9
U 10
L 5
U 4
D 9
U 1
L 8
D 3
U 7
D 6
U 2
D 8
L 12
U 2
R 11
L 10
R 9
D 4
L 4
U 2
L 11
U 11
R 6
D 7
L 2
D 6
R 9
L 7
D 6
L 12
U 12
D 5
R 1
L 11
U 12
L 4
D 4
R 12
U 6
R 4
U 6
R 3
L 3
R 10
D 6
R 9
D 12
U 6
D 3
U 13
D 13
U 2
D 10
R 6
L 10
R 10
L 13
U 6
D 12
R 8
D 8
U 6
D 1
L 7
R 7
U 5
R 4
U 2
D 8
L 11
D 13
L 10
U 3
L 8
U 6
D 5
R 8
D 12
U 13
L 10
U 12
R 10
U 9
L 3
D 10
U 3
R 2
L 8
D 4
U 12
L 13
R 14
U 13
R 4
L 7
D 5
L 12
D 4
L 9
R 12
D 10
U 11
R 7
D 3
R 5
D 13
R 11
D 8
R 4
L 3
R 11
L 5
D 7
U 2
D 8
L 12
R 2
D 10
U 11
D 6
L 9
D 8
R 3
D 9
L 9
D 6
R 10
U 5
D 2
R 9
U 5
D 7
L 1
D 14
U 2
R 14
U 11
D 4
L 8
R 8
D 2
L 3
U 4
R 2
U 5
R 6
U 8
R 2
L 4
D 1
L 9
U 13
D 12
R 7
L 6
R 10
U 12
L 14
U 3
L 6
D 12
R 13
L 13
U 5
L 5
R 6
L 11
R 7
L 6
D 14
U 2
D 12
L 2
R 9
U 4
L 14
U 12
R 12
D 3
L 5
R 8
D 10
R 13
D 6
U 9
R 10
L 14
D 4
L 6
D 8
L 12
U 10
L 11
D 3
U 2
R 2
L 13
R 6
L 3
R 14
D 7
R 3
D 14
R 3
L 1
D 15
L 6
U 6
R 3
D 12
U 11
R 10
D 10
L 2
R 1
U 7
D 2
L 7
D 13
R 9
U 6
R 6
D 7
R 3
L 14
R 2
L 10
D 13
U 8
R 3
U 12
R 10
L 12
R 11
U 6
L 13
R 1
D 14
U 13
D 13
U 1
L 10
R 2
D 4
U 1
L 7
U 2
D 9
R 9
U 7
L 9
D 7
U 2
R 1
D 13
U 3
L 1
U 3
D 15
U 6
R 8
L 6
U 6
L 8
D 1
U 4
R 15
L 13
R 3
L 15
D 4
R 10
L 14
U 2
L 3
R 7
L 12
R 15
U 7
D 2
U 15
R 12
D 12
L 6
D 8
R 5
L 14
R 8
U 1
D 5
U 1
L 3
R 2
U 9
L 5
U 8
L 2
U 1
R 5
D 3
L 4
R 15
U 15
L 6
D 12
U 9
D 12
U 9
D 9
L 16
U 10
D 4
R 13
D 4
U 6
L 1
U 6
R 12
L 6
D 8
U 11
D 9
R 16
U 14
L 15
U 15
D 5
R 6
D 16
R 1
D 10
L 5
R 12
L 1
D 9
U 9
D 11
L 9
U 5
R 11
U 16
L 6
D 13
L 3
D 7
U 1
R 11
D 6
R 6
U 7
L 14
R 2
L 6
U 8
L 9
R 3
D 1
L 13
R 8
L 14
U 11
D 13
L 12
U 8
L 6
U 13
D 8
U 8
D 12
R 7
D 16
U 4
D 2
L 6
R 7
U 1
L 12
R 13
D 16
L 3
D 4
R 15
U 5
R 1
D 14
L 1
U 4
L 14
U 15
R 14
L 14
R 16
U 10
L 4
D 6
U 5
L 15
U 8
L 9
R 12
U 7
R 4
L 16
U 10
R 6
U 14
L 3
D 13
L 6
U 12
R 3
L 16
R 16
U 8
R 13
U 7
D 6
R 3
U 16
L 2
D 2
R 17
D 17
R 3
L 11
R 12
L 1
R 17
L 9
U 2
L 16
D 16
L 7
R 2
D 13
U 1
D 5
L 5
U 14
D 13
R 3
U 5
D 9
L 9
U 3
L 2
U 8
L 5
R 13
L 8
U 2
R 6
D 2
L 9
U 15
R 14
U 1
R 11
D 13
U 9
D 17
R 14
D 14
R 7
D 3
L 1
R 15
D 13
U 14
R 3
U 5
D 15
L 10
R 10
L 1
R 16
D 13
L 17
U 9
R 1
L 4
U 4
L 3
R 10
L 14
U 17
R 6
L 17
D 11
R 5
D 5
U 1
L 9
U 7
D 1
U 6
L 13
U 6
D 13
R 17
U 3
D 5
L 15
U 3
L 5
R 12
L 16
U 8
R 7
U 16
R 14
U 17
R 2
U 6
L 5
U 17
D 11
U 3
R 8
D 5
U 16
R 1
U 11
L 15
R 12
L 5
D 13
L 16
R 14
L 15
D 17
L 6
U 9
R 18
D 8
U 6
L 18
U 11
L 3
U 18
D 14
L 17
D 5
L 15
D 5
L 12
D 13
U 9
L 7
R 11
U 12
L 4
R 6
U 7
D 17
U 13
L 10
U 15
R 7
L 2
R 8
L 7
U 1
R 17
L 17
D 4
L 13
R 2
D 5
U 3
L 1
U 2
D 18
L 3
D 17
R 6
U 12
D 11
L 1
R 10
U 9
D 7
R 12
U 11
D 13
L 11
R 14
U 6
R 11
L 13
U 5
D 15
R 12
U 10
R 16
D 16
L 1
U 18
R 8
L 8
R 4
L 18
U 5
R 15
L 15
U 13
D 16
R 4
D 13
R 6
L 13
D 1
U 8
R 13
D 8
L 17
U 12
R 2
U 13
L 6
U 16
L 15
R 17
D 1
R 8
D 9
R 4
U 11
D 11
L 12
R 10
U 2
R 3
D 7
L 2
U 8
R 3
D 4
U 6
L 8
U 9
R 7
D 1
U 12
L 4
U 13
L 11
D 14
U 18
L 17
R 4
L 19
R 1
D 12
U 9
R 11
D 4
U 15
R 7
D 6
L 17
D 4
R 5
U 11
R 9
L 4
U 11
R 10
U 4
D 19
U 18
D 12
R 2
L 15
D 1
R 13
D 3
R 5
D 6
U 11
L 3
D 5
R 2
D 15
R 4
U 19
D 8
L 11
R 17
U 7
D 1
U 2
R 18
L 10
R 4
D 7
U 8
L 1
U 11
L 15
R 2
U 13
R 12
L 8
R 1
U 4
L 12
R 13
D 7
U 5
R 14
U 13
D 13
L 18
U 18
R 14
D 18
U 12
D 11
U 6
R 6
U 5
R 4
D 7
R 1
U 5
R 1
D 1
U 13
D 10
R 19
D 7
U 14
D 7
U 19
R 12
L 2
D 12
U 10
D 17
L 12
U 1
R 8
L 8
D 15
R 9
U 5
R 11
L 10
R 2
L 13
U 10
L 7
U 1
'''

def do_part_two():
    # part 2
    # part 2

    data = sample_data[:-1]
    print([len(set(answer[1]).union({answer[0][-1]})) for answer in [reduce(lambda k, d: (reduce(lambda h, t: h + [(t[
                                                                                                                        0] + (
                                                                                                                        1 if
                                                                                                                        diff[
                                                                                                                            0] > 0 else -1 if
                                                                                                                        diff[
                                                                                                                            0] < 0 else 0),
                                                                                                                    t[
                                                                                                                        1] + (
                                                                                                                        1 if
                                                                                                                        diff[
                                                                                                                            1] > 0 else -1 if
                                                                                                                        diff[
                                                                                                                            1] < 0 else 0)) if 2 in diff or -2 in diff else t
                                                                                                                   for
                                                                                                                   diff
                                                                                                                   in [
                                                                                                                       tuple(
                                                                                                                           p - q
                                                                                                                           for
                                                                                                                           p, q
                                                                                                                           in
                                                                                                                           zip(
                                                                                                                               h[
                                                                                                                                   -1],
                                                                                                                               t))]],
                                                                                                 k[0][1:], [(k[0][0][
                                                                                                                 0] + (
                                                                                                                 1 if d == 'R' else -1 if d == 'L' else 0),
                                                                                                             k[0][0][
                                                                                                                 1] + (
                                                                                                                 1 if d == 'U' else -1 if d == 'D' else 0))]),
                                                                                          k[1] + [k[0][-1]]),
                                                                            [d for d in
                                                                             [i for l in data.split('\n') for i in
                                                                              [l.split(' ')[0]] * int(
                                                                                  l.split(' ')[1])]],
                                                                            ([(0, 0)] * 10, []))]][0])

if __name__ == "__main__":
    do_part_one()
    do_part_two()

